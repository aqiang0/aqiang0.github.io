<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JDBC核心技术</title>
    <link href="/2020/10/30/JDBC/"/>
    <url>/2020/10/30/JDBC/</url>
    
    <content type="html"><![CDATA[<hr><h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src="/2020/10/30/JDBC/1566741430592.png" alt="1566741430592"> </p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="/2020/10/30/JDBC/1555575760234.png" alt="1555575760234"></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="/2020/10/30/JDBC/1555575981203.png" alt="1555575981203"></p><hr><ul><li>总结如下：</li></ul><p><img src="/2020/10/30/JDBC/1566741692804.png" alt="1566741692804"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li> <strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                ————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="/2020/10/30/JDBC/1565969323908.png" alt="1565969323908"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src="/2020/10/30/JDBC/1555576157618.png" alt="1555576157618"></p><p><img src="/2020/10/30/JDBC/1555576170074.png" alt="1555576170074"></p><ul><li><p>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</p><p><img src="/2020/10/30/JDBC/1566134718955.png" alt="1566134718955"></p></li></ul><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p> <img src="/2020/10/30/JDBC/1566134781682.png" alt="1566134781682"></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img src="/2020/10/30/JDBC/1566135290460.png" alt="1566135290460"></p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="/2020/10/30/JDBC/1566136831283.png" alt="1566136831283"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="/2020/10/30/JDBC/1555576477107.png" alt="1555576477107"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/atguigu</li><li>jdbc:mysql://localhost:3306/atguigu**?useUnicode=true&amp;characterEncoding=utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p></li><li><p>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConnection1</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">try</span> &#123;           <span class="hljs-comment">//1.提供java.sql.Driver接口实现类的对象</span>           Driver driver = <span class="hljs-keyword">null</span>;           driver = <span class="hljs-keyword">new</span> com.mysql.jdbc.Driver();           <span class="hljs-comment">//2.提供url，指明具体操作的数据</span>           String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;           <span class="hljs-comment">//3.提供Properties的对象，指明用户名和密码</span>           Properties info = <span class="hljs-keyword">new</span> Properties();           info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);           info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;abc123&quot;</span>);           <span class="hljs-comment">//4.调用driver的connect()，获取连接</span>           Connection conn = driver.connect(url, info);           System.out.println(conn);       &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;           e.printStackTrace();       &#125;   &#125;</code></pre><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConnection2</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">try</span> &#123;           <span class="hljs-comment">//1.实例化Driver</span>           String className = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;           Class clazz = Class.forName(className);           Driver driver = (Driver) clazz.newInstance();           <span class="hljs-comment">//2.提供url，指明具体操作的数据</span>           String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;           <span class="hljs-comment">//3.提供Properties的对象，指明用户名和密码</span>           Properties info = <span class="hljs-keyword">new</span> Properties();           info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);           info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;abc123&quot;</span>);           <span class="hljs-comment">//4.调用driver的connect()，获取连接</span>           Connection conn = driver.connect(url, info);           System.out.println(conn);       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;           e.printStackTrace();       &#125;   &#125;</code></pre><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConnection3</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">try</span> &#123;           <span class="hljs-comment">//1.数据库连接的4个基本要素：</span>           String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;           String user = <span class="hljs-string">&quot;root&quot;</span>;           String password = <span class="hljs-string">&quot;abc123&quot;</span>;           String driverName = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;           <span class="hljs-comment">//2.实例化Driver</span>           Class clazz = Class.forName(driverName);           Driver driver = (Driver) clazz.newInstance();           <span class="hljs-comment">//3.注册驱动</span>           DriverManager.registerDriver(driver);           <span class="hljs-comment">//4.获取连接</span>           Connection conn = DriverManager.getConnection(url, user, password);           System.out.println(conn);       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;           e.printStackTrace();       &#125;   &#125;</code></pre><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConnection4</span><span class="hljs-params">()</span> </span>&#123;       <span class="hljs-keyword">try</span> &#123;           <span class="hljs-comment">//1.数据库连接的4个基本要素：</span>           String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;           String user = <span class="hljs-string">&quot;root&quot;</span>;           String password = <span class="hljs-string">&quot;abc123&quot;</span>;           String driverName = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;           <span class="hljs-comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span>           Class.forName(driverName);           <span class="hljs-comment">//Driver driver = (Driver) clazz.newInstance();</span>           <span class="hljs-comment">//3.注册驱动</span>           <span class="hljs-comment">//DriverManager.registerDriver(driver);</span>           <span class="hljs-comment">/*</span><span class="hljs-comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span><span class="hljs-comment">           static &#123;</span><span class="hljs-comment">               try &#123;</span><span class="hljs-comment">                   DriverManager.registerDriver(new Driver());</span><span class="hljs-comment">               &#125; catch (SQLException var1) &#123;</span><span class="hljs-comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><span class="hljs-comment">               &#125;</span><span class="hljs-comment">           &#125;</span><span class="hljs-comment"></span><span class="hljs-comment">            */</span>           <span class="hljs-comment">//3.获取连接</span>           Connection conn = DriverManager.getConnection(url, user, password);           System.out.println(conn);       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;           e.printStackTrace();       &#125;   &#125;</code></pre><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><pre><code class="hljs java"><span class="hljs-meta">@Test</span>   <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">testConnection5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;   <span class="hljs-comment">//1.加载配置文件</span>       InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);       Properties pros = <span class="hljs-keyword">new</span> Properties();       pros.load(is);              <span class="hljs-comment">//2.读取配置信息</span>       String user = pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);       String password = pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);       String url = pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);       String driverClass = pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);       <span class="hljs-comment">//3.加载驱动</span>       Class.forName(driverClass);       <span class="hljs-comment">//4.获取连接</span>       Connection conn = DriverManager.getConnection(url,user,password);       System.out.println(conn);   &#125;</code></pre><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><pre><code class="hljs properties"><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">abc123</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test</span><span class="hljs-attr">driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span></code></pre><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/2020/10/30/JDBC/1566573842140.png" alt="1566573842140"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><pre><code class="hljs sql">int excuteUpdate(String sql)：执行更新操作<span class="hljs-keyword">INSERT</span>、<span class="hljs-keyword">UPDATE</span>、<span class="hljs-keyword">DELETE</span>ResultSet executeQuery(<span class="hljs-keyword">String</span> <span class="hljs-keyword">sql</span>)：执行查询操作<span class="hljs-keyword">SELECT</span></code></pre></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StatementTest</span> </span>&#123;<span class="hljs-comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLogin</span><span class="hljs-params">()</span> </span>&#123;Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);System.out.print(<span class="hljs-string">&quot;用户名：&quot;</span>);String userName = scan.nextLine();System.out.print(<span class="hljs-string">&quot;密   码：&quot;</span>);String password = scan.nextLine();<span class="hljs-comment">// SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span>String sql = <span class="hljs-string">&quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot;</span> + userName + <span class="hljs-string">&quot;&#x27; AND PASSWORD = &#x27;&quot;</span> + password+ <span class="hljs-string">&quot;&#x27;&quot;</span>;User user = get(sql, User.class);<span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span>) &#123;System.out.println(<span class="hljs-string">&quot;登陆成功!&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">&quot;用户名或密码错误！&quot;</span>);&#125;&#125;<span class="hljs-comment">// 使用Statement实现对数据表的查询操作</span><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">get</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz)</span> </span>&#123;T t = <span class="hljs-keyword">null</span>;Connection conn = <span class="hljs-keyword">null</span>;Statement st = <span class="hljs-keyword">null</span>;ResultSet rs = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 1.加载配置文件</span>InputStream is = StatementTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);Properties pros = <span class="hljs-keyword">new</span> Properties();pros.load(is);<span class="hljs-comment">// 2.读取配置信息</span>String user = pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);String password = pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);String url = pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);String driverClass = pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<span class="hljs-comment">// 3.加载驱动</span>Class.forName(driverClass);<span class="hljs-comment">// 4.获取连接</span>conn = DriverManager.getConnection(url, user, password);st = conn.createStatement();rs = st.executeQuery(sql);<span class="hljs-comment">// 获取结果集的元数据</span>ResultSetMetaData rsmd = rs.getMetaData();<span class="hljs-comment">// 获取结果集的列数</span><span class="hljs-keyword">int</span> columnCount = rsmd.getColumnCount();<span class="hljs-keyword">if</span> (rs.next()) &#123;t = clazz.newInstance();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// //1. 获取列的名称</span><span class="hljs-comment">// String columnName = rsmd.getColumnName(i+1);</span><span class="hljs-comment">// 1. 获取列的别名</span>String columnName = rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 2. 根据列名获取对应数据表中的数据</span>Object columnVal = rs.getObject(columnName);<span class="hljs-comment">// 3. 将数据表中得到的数据，封装进对象</span>Field field = clazz.getDeclaredField(columnName);field.setAccessible(<span class="hljs-keyword">true</span>);field.set(t, columnVal);&#125;<span class="hljs-keyword">return</span> t;&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 关闭资源</span><span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">try</span> &#123;rs.close();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;&#125;<span class="hljs-keyword">if</span> (st != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">try</span> &#123;st.close();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;&#125;<span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-keyword">try</span> &#123;conn.close();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;</code></pre><p>综上：</p><p><img src="/2020/10/30/JDBC/1566569819744.png" alt="1566569819744"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><pre><code class="hljs java"><span class="hljs-comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String sql,Object ... args)</span></span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//1.获取数据库的连接</span>conn = JDBCUtils.getConnection();<span class="hljs-comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span>ps = conn.prepareStatement(sql);<span class="hljs-comment">//3.填充占位符</span><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; args.length;i++)&#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-comment">//4.执行sql语句</span>ps.execute();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;<span class="hljs-keyword">finally</span>&#123;<span class="hljs-comment">//5.关闭资源</span>JDBCUtils.closeResource(conn, ps);&#125;&#125;</code></pre><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><pre><code class="hljs java"><span class="hljs-comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;PreparedStatement ps = <span class="hljs-keyword">null</span>;ResultSet rs = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 1.获取数据库连接</span>conn = JDBCUtils.getConnection();<span class="hljs-comment">// 2.预编译sql语句，得到PreparedStatement对象</span>ps = conn.prepareStatement(sql);<span class="hljs-comment">// 3.填充占位符</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-comment">// 4.执行executeQuery(),得到结果集：ResultSet</span>rs = ps.executeQuery();<span class="hljs-comment">// 5.得到结果集的元数据：ResultSetMetaData</span>ResultSetMetaData rsmd = rs.getMetaData();<span class="hljs-comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span><span class="hljs-keyword">int</span> columnCount = rsmd.getColumnCount();<span class="hljs-keyword">if</span> (rs.next()) &#123;T t = clazz.newInstance();<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// 遍历每一个列</span><span class="hljs-comment">// 获取列值</span>Object columnVal = rs.getObject(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 获取列的别名:列的别名，使用类的属性名充当</span>String columnLabel = rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<span class="hljs-comment">// 6.2使用反射，给对象的相应属性赋值</span>Field field = clazz.getDeclaredField(columnLabel);field.setAccessible(<span class="hljs-keyword">true</span>);field.set(t, columnVal);&#125;<span class="hljs-keyword">return</span> t;&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 7.关闭资源</span>JDBCUtils.closeResource(conn, ps, rs);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;</code></pre><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="/2020/10/30/JDBC/1555580152530.png" alt="1555580152530"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p> isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p></li></ul></li></ul><p><img src="/2020/10/30/JDBC/1555579494691.png" alt="1555579494691"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="/2020/10/30/JDBC/1555579816884.png" alt="1555579816884"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src="/2020/10/30/JDBC/1555580275036.png" alt="1555580275036"></p><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src="/2020/10/30/JDBC/1555580735377.png" alt="1555580735377"></p><p>向数据表中添加如下数据：</p><p><img src="/2020/10/30/JDBC/1555580763636.png" alt="1555580763636"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src="/2020/10/30/JDBC/1555580937490.png" alt="1555580937490"></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img src="/2020/10/30/JDBC/1555580965019.png" alt="1555580965019"></p><hr><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="/2020/10/30/JDBC/1555581069798.png" alt="1555581069798"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><pre><code class="hljs java"><span class="hljs-comment">//获取连接</span>Connection conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;PreparedStatement ps = conn.prepareStatement(sql);<span class="hljs-comment">// 填充占位符</span>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;徐海强&quot;</span>);ps.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;xhq@126.com&quot;</span>);ps.setDate(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> Date(<span class="hljs-keyword">new</span> java.util.Date().getTime()));<span class="hljs-comment">// 操作Blob类型的变量</span>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;xhq.png&quot;</span>);ps.setBlob(<span class="hljs-number">4</span>, fis);<span class="hljs-comment">//执行</span>ps.execute();fis.close();JDBCUtils.closeResource(conn, ps);</code></pre><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><pre><code class="hljs java">Connection conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">&quot;update customers set photo = ? where id = ?&quot;</span>;PreparedStatement ps = conn.prepareStatement(sql);<span class="hljs-comment">// 填充占位符</span><span class="hljs-comment">// 操作Blob类型的变量</span>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;coffee.png&quot;</span>);ps.setBlob(<span class="hljs-number">1</span>, fis);ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">25</span>);ps.execute();fis.close();JDBCUtils.closeResource(conn, ps);</code></pre><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><pre><code class="hljs java">String sql = <span class="hljs-string">&quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;</span>;conn = getConnection();ps = conn.prepareStatement(sql);ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>);rs = ps.executeQuery();<span class="hljs-keyword">if</span>(rs.next())&#123;Integer id = rs.getInt(<span class="hljs-number">1</span>);    String name = rs.getString(<span class="hljs-number">2</span>);String email = rs.getString(<span class="hljs-number">3</span>);    Date birth = rs.getDate(<span class="hljs-number">4</span>);Customer cust = <span class="hljs-keyword">new</span> Customer(id, name, email, birth);    System.out.println(cust);     <span class="hljs-comment">//读取Blob类型的字段</span>Blob photo = rs.getBlob(<span class="hljs-number">5</span>);InputStream is = photo.getBinaryStream();OutputStream os = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;c.jpg&quot;</span>);<span class="hljs-keyword">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;os.write(buffer, <span class="hljs-number">0</span>, len);&#125;    JDBCUtils.closeResource(conn, ps, rs);<span class="hljs-keyword">if</span>(is != <span class="hljs-keyword">null</span>)&#123;is.close();&#125;<span class="hljs-keyword">if</span>(os !=  <span class="hljs-keyword">null</span>)&#123;os.close();&#125;    &#125;</code></pre><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> goods(<span class="hljs-keyword">id</span> <span class="hljs-built_in">INT</span> PRIMARY <span class="hljs-keyword">KEY</span> AUTO_INCREMENT,<span class="hljs-keyword">NAME</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>));</code></pre><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><pre><code class="hljs java">Connection conn = JDBCUtils.getConnection();Statement st = conn.createStatement();<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;String sql = <span class="hljs-string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="hljs-string">&quot;)&quot;</span>;st.executeUpdate(sql);&#125;</code></pre><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><pre><code class="hljs java"><span class="hljs-keyword">long</span> start = System.currentTimeMillis();Connection conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;PreparedStatement ps = conn.prepareStatement(sql);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);ps.executeUpdate();&#125;<span class="hljs-keyword">long</span> end = System.currentTimeMillis();System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//82340</span>JDBCUtils.closeResource(conn, ps);</code></pre><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span><span class="hljs-comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span><span class="hljs-comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span><span class="hljs-comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<span class="hljs-keyword">long</span> start = System.currentTimeMillis();Connection conn = JDBCUtils.getConnection();String sql = <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;PreparedStatement ps = conn.prepareStatement(sql);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">1000000</span>;i++)&#123;ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<span class="hljs-comment">//1.“攒”sql</span>ps.addBatch();<span class="hljs-keyword">if</span>(i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//2.执行</span>ps.executeBatch();<span class="hljs-comment">//3.清空</span>ps.clearBatch();&#125;&#125;<span class="hljs-keyword">long</span> end = System.currentTimeMillis();System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//20000条：625                                                                         //1000000条:14733  </span>JDBCUtils.closeResource(conn, ps);&#125;</code></pre><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment">* 层次四：在层次三的基础上操作</span><span class="hljs-comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span><span class="hljs-comment">*/</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<span class="hljs-keyword">long</span> start = System.currentTimeMillis();Connection conn = JDBCUtils.getConnection();<span class="hljs-comment">//1.设置为不自动提交数据</span>conn.setAutoCommit(<span class="hljs-keyword">false</span>);String sql = <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;PreparedStatement ps = conn.prepareStatement(sql);<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">1000000</span>;i++)&#123;ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<span class="hljs-comment">//1.“攒”sql</span>ps.addBatch();<span class="hljs-keyword">if</span>(i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//2.执行</span>ps.executeBatch();<span class="hljs-comment">//3.清空</span>ps.clearBatch();&#125;&#125;<span class="hljs-comment">//2.提交数据</span>conn.commit();<span class="hljs-keyword">long</span> end = System.currentTimeMillis();System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//1000000条:4978 </span>JDBCUtils.closeResource(conn, ps);&#125;</code></pre><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都<strong>被提交(commit)**，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testJDBCTransaction</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 1.获取数据库连接</span>conn = JDBCUtils.getConnection();<span class="hljs-comment">// 2.开启事务</span>conn.setAutoCommit(<span class="hljs-keyword">false</span>);<span class="hljs-comment">// 3.进行数据库操作</span>String sql1 = <span class="hljs-string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;update(conn, sql1, <span class="hljs-string">&quot;AA&quot;</span>);<span class="hljs-comment">// 模拟网络异常</span><span class="hljs-comment">//System.out.println(10 / 0);</span>String sql2 = <span class="hljs-string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;update(conn, sql2, <span class="hljs-string">&quot;BB&quot;</span>);<span class="hljs-comment">// 4.若没有异常，则提交事务</span>conn.commit();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-comment">// 5.若有异常，则回滚事务</span><span class="hljs-keyword">try</span> &#123;conn.rollback();&#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;e1.printStackTrace();&#125;    &#125; <span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//6.恢复每次DML操作的自动提交功能</span>conn.setAutoCommit(<span class="hljs-keyword">true</span>);&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125;        <span class="hljs-comment">//7.关闭连接</span>JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);     &#125;  &#125;</code></pre><p>其中，对数据库操作的方法为：</p><pre><code class="hljs java"><span class="hljs-comment">//使用事务以后的通用的增删改操作（version 2.0）</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Connection conn ,String sql, Object... args)</span> </span>&#123;PreparedStatement ps = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span>ps = conn.prepareStatement(sql);<span class="hljs-comment">// 2.填充占位符</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;ps.setObject(i + <span class="hljs-number">1</span>, args[i]);&#125;<span class="hljs-comment">// 3.执行sql语句</span>ps.execute();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">finally</span> &#123;<span class="hljs-comment">// 4.关闭资源</span>JDBCUtils.closeResource(<span class="hljs-keyword">null</span>, ps);&#125;&#125;</code></pre><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br> 事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br> 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br> 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="/2020/10/30/JDBC/1555586275271.png" alt="1555586275271"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li></ul><ul><li>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><pre><code class="hljs mysql">SELECT @@tx_isolation;</code></pre></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><pre><code class="hljs mysql">set  transaction isolation level read committed;</code></pre></li><li><p>设置数据库系统的全局的隔离级别:</p><pre><code class="hljs mysql">set global transaction isolation level read committed;</code></pre></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><pre><code class="hljs mysql">create user tom identified by &#39;abc123&#39;;</code></pre></li><li><p>授予权限</p><pre><code class="hljs mysql">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.grant all privileges on *.* to tom@&#39;%&#39;  identified by &#39;abc123&#39;;  #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#39;abc123&#39;; </code></pre></li></ul></li></ul><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="/2020/10/30/JDBC/1566726681515.png" alt="1566726681515"></p><ul><li>层次结构：</li></ul><p><img src="/2020/10/30/JDBC/1566745811244.png" alt="1566745811244"></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<span class="hljs-keyword">import</span> java.lang.reflect.Type;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HanYanBing</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseDao</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<span class="hljs-keyword">private</span> QueryRunner queryRunner = <span class="hljs-keyword">new</span> QueryRunner();<span class="hljs-comment">// 定义一个变量来接收泛型的类型</span><span class="hljs-keyword">private</span> Class&lt;T&gt; type;<span class="hljs-comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BaseDao</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 获取子类的类型</span>Class clazz = <span class="hljs-keyword">this</span>.getClass();<span class="hljs-comment">// 获取父类的类型</span><span class="hljs-comment">// getGenericSuperclass()用来获取当前类的父类的类型</span><span class="hljs-comment">// ParameterizedType表示的是带泛型的类型</span>ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();<span class="hljs-comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span><span class="hljs-comment">// 这个方法会返回一个Type的数组</span>Type[] types = parameterizedType.getActualTypeArguments();<span class="hljs-comment">// 获取具体的泛型的类型·</span><span class="hljs-keyword">this</span>.type = (Class&lt;T&gt;) types[<span class="hljs-number">0</span>];&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 通用的增删改操作</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">update</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> </span>&#123;<span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-keyword">try</span> &#123;count = queryRunner.update(conn, sql, params);&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">return</span> count;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取一个对象</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getBean</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> </span>&#123;T t = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;t = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> BeanHandler&lt;T&gt;(type), params);&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">return</span> t;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取所有对象</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getBeanList</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> </span>&#123;List&lt;T&gt; list = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;list = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> BeanListHandler&lt;T&gt;(type), params);&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">return</span> list;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getValue</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> </span>&#123;Object count = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">// 调用queryRunner的query方法获取一个单一的值</span>count = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> ScalarHandler&lt;&gt;(), params);&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; <span class="hljs-keyword">return</span> count;&#125;&#125;</code></pre><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Book;<span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Page;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookDao</span> </span>&#123;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 从数据库中查询出所有的记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">getBooks</span><span class="hljs-params">(Connection conn)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 向数据库中插入一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveBook</span><span class="hljs-params">(Connection conn,Book book)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 从数据库中根据图书的id删除一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bookId</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(Connection conn,String bookId)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据图书的id从数据库中查询出一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bookId</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><span class="hljs-comment"> */</span><span class="hljs-function">Book <span class="hljs-title">getBookById</span><span class="hljs-params">(Connection conn,String bookId)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据图书的id从数据库中更新一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Connection conn,Book book)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取带分页的图书信息</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span><span class="hljs-comment"> */</span><span class="hljs-function">Page&lt;Book&gt; <span class="hljs-title">getPageBooks</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 获取带分页和价格范围的图书信息</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span><span class="hljs-comment"> */</span><span class="hljs-function">Page&lt;Book&gt; <span class="hljs-title">getPageBooksByPrice</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page, <span class="hljs-keyword">double</span> minPrice, <span class="hljs-keyword">double</span> maxPrice)</span></span>;&#125;</code></pre><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.User;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span><span class="hljs-comment"> */</span><span class="hljs-function">User <span class="hljs-title">getUser</span><span class="hljs-params">(Connection conn,User user)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 根据User对象中的用户名从数据库中获取一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">checkUsername</span><span class="hljs-params">(Connection conn,User user)</span></span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 向数据库中插入User对象</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(Connection conn,User user)</span></span>;&#125;</code></pre><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao.impl;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Book;<span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Page;<span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BaseDao;<span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BookDao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span>&lt;<span class="hljs-title">Book</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">BookDao</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">getBooks</span><span class="hljs-params">(Connection conn)</span> </span>&#123;<span class="hljs-comment">// 调用BaseDao中得到一个List的方法</span>List&lt;Book&gt; beanList = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;</span>;beanList = getBeanList(conn,sql);<span class="hljs-keyword">return</span> beanList;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveBook</span><span class="hljs-params">(Connection conn,Book book)</span> </span>&#123;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;<span class="hljs-comment">// 调用BaseDao中通用的增删改的方法</span>update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteBookById</span><span class="hljs-params">(Connection conn,String bookId)</span> </span>&#123;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;DELETE FROM books WHERE id = ?&quot;</span>;<span class="hljs-comment">// 调用BaseDao中通用增删改的方法</span>update(conn,sql, bookId);&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">getBookById</span><span class="hljs-params">(Connection conn,String bookId)</span> </span>&#123;<span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span>Book book = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;</span>;book = getBean(conn,sql, bookId);<span class="hljs-keyword">return</span> book;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateBook</span><span class="hljs-params">(Connection conn,Book book)</span> </span>&#123;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;</span>;<span class="hljs-comment">// 调用BaseDao中通用的增删改的方法</span>update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title">getPageBooks</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page)</span> </span>&#123;<span class="hljs-comment">// 获取数据库中图书的总记录数</span>String sql = <span class="hljs-string">&quot;select count(*) from books&quot;</span>;<span class="hljs-comment">// 调用BaseDao中获取一个单一值的方法</span><span class="hljs-keyword">long</span> totalRecord = (<span class="hljs-keyword">long</span>) getValue(conn,sql);<span class="hljs-comment">// 将总记录数设置都page对象中</span>page.setTotalRecord((<span class="hljs-keyword">int</span>) totalRecord);<span class="hljs-comment">// 获取当前页中的记录存放的List</span>String sql2 = <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;</span>;<span class="hljs-comment">// 调用BaseDao中获取一个集合的方法</span>List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="hljs-number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);<span class="hljs-comment">// 将这个List设置到page对象中</span>page.setList(beanList);<span class="hljs-keyword">return</span> page;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title">getPageBooksByPrice</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page, <span class="hljs-keyword">double</span> minPrice, <span class="hljs-keyword">double</span> maxPrice)</span> </span>&#123;<span class="hljs-comment">// 获取数据库中图书的总记录数</span>String sql = <span class="hljs-string">&quot;select count(*) from books where price between ? and ?&quot;</span>;<span class="hljs-comment">// 调用BaseDao中获取一个单一值的方法</span><span class="hljs-keyword">long</span> totalRecord = (<span class="hljs-keyword">long</span>) getValue(conn,sql,minPrice,maxPrice);<span class="hljs-comment">// 将总记录数设置都page对象中</span>page.setTotalRecord((<span class="hljs-keyword">int</span>) totalRecord);<span class="hljs-comment">// 获取当前页中的记录存放的List</span>String sql2 = <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;</span>;<span class="hljs-comment">// 调用BaseDao中获取一个集合的方法</span>List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="hljs-number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);<span class="hljs-comment">// 将这个List设置到page对象中</span>page.setList(beanList);<span class="hljs-keyword">return</span> page;&#125;&#125;</code></pre><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao.impl;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.User;<span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BaseDao;<span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.UserDao;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseDao</span>&lt;<span class="hljs-title">User</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDao</span> </span>&#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">(Connection conn,User user)</span> </span>&#123;<span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span>User bean = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;select id,username,password,email from users where username = ? and password = ?&quot;</span>;bean = getBean(conn,sql, user.getUsername(), user.getPassword());<span class="hljs-keyword">return</span> bean;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkUsername</span><span class="hljs-params">(Connection conn,User user)</span> </span>&#123;<span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span>User bean = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 写sql语句</span>String sql = <span class="hljs-string">&quot;select id,username,password,email from users where username = ?&quot;</span>;bean = getBean(conn,sql, user.getUsername());<span class="hljs-keyword">return</span> bean != <span class="hljs-keyword">null</span>;&#125;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(Connection conn,User user)</span> </span>&#123;<span class="hljs-comment">//写sql语句</span>String sql = <span class="hljs-string">&quot;insert into users(username,password,email) values(?,?,?)&quot;</span>;<span class="hljs-comment">//调用BaseDao中通用的增删改的方法</span>update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());&#125;&#125;</code></pre><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 图书类</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<span class="hljs-keyword">private</span> Integer id;<span class="hljs-keyword">private</span> String title; <span class="hljs-comment">// 书名</span><span class="hljs-keyword">private</span> String author; <span class="hljs-comment">// 作者</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> price; <span class="hljs-comment">// 价格</span><span class="hljs-keyword">private</span> Integer sales; <span class="hljs-comment">// 销量</span><span class="hljs-keyword">private</span> Integer stock; <span class="hljs-comment">// 库存</span><span class="hljs-keyword">private</span> String imgPath = <span class="hljs-string">&quot;static/img/default.jpg&quot;</span>; <span class="hljs-comment">// 封面图片的路径</span><span class="hljs-comment">//构造器，get()，set()，toString()方法略</span>&#125;</code></pre><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 页码类</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<span class="hljs-keyword">private</span> List&lt;T&gt; list; <span class="hljs-comment">// 每页查到的记录存放的集合</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> PAGE_SIZE = <span class="hljs-number">4</span>; <span class="hljs-comment">// 每页显示的记录数</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageNo; <span class="hljs-comment">// 当前页</span><span class="hljs-comment">//private int totalPageNo; // 总页数，通过计算得到</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalRecord; <span class="hljs-comment">// 总记录数，通过查询数据库得到</span></code></pre><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户类</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<span class="hljs-keyword">private</span> Integer id;<span class="hljs-keyword">private</span> String username;<span class="hljs-keyword">private</span> String password;<span class="hljs-keyword">private</span> String email;</code></pre><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="/2020/10/30/JDBC/1555593464033.png" alt="1555593464033"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="/2020/10/30/JDBC/1555593598606.png" alt="1555593598606"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><pre><code class="hljs java"><span class="hljs-comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;ComboPooledDataSource cpds = <span class="hljs-keyword">new</span> ComboPooledDataSource();cpds.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); cpds.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);cpds.setUser(<span class="hljs-string">&quot;root&quot;</span>);cpds.setPassword(<span class="hljs-string">&quot;abc123&quot;</span>);<span class="hljs-comment">//cpds.setMaxPoolSize(100);</span>Connection conn = cpds.getConnection();<span class="hljs-keyword">return</span> conn;&#125;</code></pre><ul><li>获取连接方式二</li></ul><pre><code class="hljs java"><span class="hljs-comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource cpds = <span class="hljs-keyword">new</span> ComboPooledDataSource(<span class="hljs-string">&quot;helloc3p0&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException</span>&#123;Connection conn = cpds.getConnection();<span class="hljs-keyword">return</span> conn;&#125;</code></pre><p>其中，src下的配置文件为：【c3p0-config.xml】</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">named-config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;helloc3p0&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>abc123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span><span class="hljs-comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">named-config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span></code></pre><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;BasicDataSource source = <span class="hljs-keyword">new</span> BasicDataSource();source.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);source.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span>);source.setUsername(<span class="hljs-string">&quot;root&quot;</span>);source.setPassword(<span class="hljs-string">&quot;abc123&quot;</span>);<span class="hljs-comment">//</span>source.setInitialSize(<span class="hljs-number">10</span>);Connection conn = source.getConnection();<span class="hljs-keyword">return</span> conn;&#125;</code></pre><ul><li>获取连接方式二：</li></ul><pre><code class="hljs java"><span class="hljs-comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource source = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">static</span>&#123;<span class="hljs-keyword">try</span> &#123;Properties pros = <span class="hljs-keyword">new</span> Properties();InputStream is = DBCPTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);pros.load(is);<span class="hljs-comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span>source = BasicDataSourceFactory.createDataSource(pros);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title">getConnection4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;Connection conn = source.getConnection();<span class="hljs-keyword">return</span> conn;&#125;</code></pre><p>其中，src下的配置文件为：【dbcp.properties】</p><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">abc123</span><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><span class="hljs-comment">#...</span></code></pre><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.druid;<span class="hljs-keyword">import</span> java.sql.Connection;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDruid</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;Properties pro = <span class="hljs-keyword">new</span> Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));DataSource ds = DruidDataSourceFactory.createDataSource(pro);Connection conn = ds.getConnection();System.out.println(conn);&#125;&#125;</code></pre><p>其中，src下的配置文件为：【druid.properties】</p><pre><code class="hljs java">url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test?rewriteBatchedStatements=true</span>username=rootpassword=<span class="hljs-number">123456</span>driverClassName=com.mysql.jdbc.DriverinitialSize=<span class="hljs-number">10</span>maxActive=<span class="hljs-number">20</span>maxWait=<span class="hljs-number">1000</span>filters=wall</code></pre><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li><p>API包说明：</p></li></ul><p><img src="/2020/10/30/JDBC/1555595163263.png" alt="1555595163263"></p><p><img src="/2020/10/30/JDBC/1555595198644.png" alt="1555595198644"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li> ……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</T></T></li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</T></T></li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li><li><p>测试</p></li></ul><pre><code class="hljs java"><span class="hljs-comment">// 测试添加</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();Connection conn = JDBCUtils.getConnection3();String sql = <span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<span class="hljs-keyword">int</span> count = runner.update(conn, sql, <span class="hljs-string">&quot;何成飞&quot;</span>, <span class="hljs-string">&quot;he@qq.com&quot;</span>, <span class="hljs-string">&quot;1992-09-08&quot;</span>);System.out.println(<span class="hljs-string">&quot;添加了&quot;</span> + count + <span class="hljs-string">&quot;条记录&quot;</span>);JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">// 测试删除</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();Connection conn = JDBCUtils.getConnection3();String sql = <span class="hljs-string">&quot;delete from customers where id &lt; ?&quot;</span>;<span class="hljs-keyword">int</span> count = runner.update(conn, sql,<span class="hljs-number">3</span>);System.out.println(<span class="hljs-string">&quot;删除了&quot;</span> + count + <span class="hljs-string">&quot;条记录&quot;</span>);JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;</code></pre><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值对象</li></ul></li></ul><ul><li>测试</li></ul><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 测试查询:查询一条记录</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * 使用ResultSetHandler的实现类：BeanHandler</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryInstance</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();Connection conn = JDBCUtils.getConnection3();String sql = <span class="hljs-string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;<span class="hljs-comment">//</span>BeanHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> BeanHandler&lt;&gt;(Customer.class);Customer customer = runner.query(conn, sql, handler, <span class="hljs-number">23</span>);System.out.println(customer);JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 测试查询:查询多条记录构成的集合</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();Connection conn = JDBCUtils.getConnection3();String sql = <span class="hljs-string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;<span class="hljs-comment">//</span>BeanListHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="hljs-number">23</span>);list.forEach(System.out::println);JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 自定义ResultSetHandler的实现类</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryInstance1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();Connection conn = JDBCUtils.getConnection3();String sql = <span class="hljs-string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;ResultSetHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;<span class="hljs-meta">@Override</span><span class="hljs-function"><span class="hljs-keyword">public</span> Customer <span class="hljs-title">handle</span><span class="hljs-params">(ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;System.out.println(<span class="hljs-string">&quot;handle&quot;</span>);<span class="hljs-comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span><span class="hljs-keyword">if</span>(rs.next())&#123;<span class="hljs-keyword">int</span> id = rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);String name = rs.getString(<span class="hljs-string">&quot;name&quot;</span>);String email = rs.getString(<span class="hljs-string">&quot;email&quot;</span>);Date birth = rs.getDate(<span class="hljs-string">&quot;birth&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Customer(id, name, email, birth);&#125;<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;&#125;;Customer customer = runner.query(conn, sql, handler, <span class="hljs-number">23</span>);System.out.println(customer);JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span><span class="hljs-comment"> * 使用ScalarHandler</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testQueryValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;QueryRunner runner = <span class="hljs-keyword">new</span> QueryRunner();Connection conn = JDBCUtils.getConnection3();<span class="hljs-comment">//测试一：</span><span class="hljs-comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span><span class="hljs-comment">//ScalarHandler handler = new ScalarHandler();</span><span class="hljs-comment">//long count = (long) runner.query(conn, sql, handler, 20);</span><span class="hljs-comment">//System.out.println(count);</span><span class="hljs-comment">//测试二：</span>String sql = <span class="hljs-string">&quot;select max(birth) from customers&quot;</span>;ScalarHandler handler = <span class="hljs-keyword">new</span> ScalarHandler();Date birth = (Date) runner.query(conn, sql, handler);System.out.println(birth);JDBCUtils.closeResource(conn, <span class="hljs-keyword">null</span>);&#125;</code></pre><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><pre><code class="hljs java">总结<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateWithTx</span><span class="hljs-params">()</span> </span>&#123;Connection conn = <span class="hljs-keyword">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//1.获取连接的操作（</span><span class="hljs-comment">//① 手写的连接：JDBCUtils.getConnection();</span><span class="hljs-comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span><span class="hljs-comment">//2.对数据表进行一系列CRUD操作</span><span class="hljs-comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span><span class="hljs-comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span><span class="hljs-comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span><span class="hljs-comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span><span class="hljs-comment">//提交数据</span>conn.commit();&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//回滚数据</span>conn.rollback();&#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;e1.printStackTrace();&#125;&#125;<span class="hljs-keyword">finally</span>&#123;<span class="hljs-comment">//3.关闭连接等操作</span><span class="hljs-comment">//① JDBCUtils.closeResource();</span><span class="hljs-comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span>&#125;&#125;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ceshi</title>
    <link href="/2020/10/30/ceshi/"/>
    <url>/2020/10/30/ceshi/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/19/hello-world/"/>
    <url>/2020/10/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
      <category>java基础语法</category>
      
      <category>PlayStation</category>
      
      <category>Games</category>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
